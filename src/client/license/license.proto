syntax = "proto3";

package license;
option go_package = "github.com/pachyderm/pachyderm/src/client/license";

import "google/protobuf/timestamp.proto";
import "client/enterprise/enterprise.proto";

message ActivateRequest {
  // activation_code is a Pachyderm enterprise activation code. New users can
  // obtain trial activation codes
  string activation_code = 1;

  // expires is a timestamp indicating when this activation code will expire.
  // This should not generally be set (it's primarily used for testing), and is
  // only applied if it's earlier than the signed expiration time in
  // 'activation_code'.
  google.protobuf.Timestamp expires = 2;
}

message ActivateResponse {
  enterprise.TokenInfo info = 1;
}

message GetActivationCodeRequest {}

message GetActivationCodeResponse {
  enterprise.State state = 1;
  enterprise.TokenInfo info = 2;
  string activation_code = 3;
}

message DeactivateRequest{}
message DeactivateResponse{}

message AddClusterRequest {
  string id = 1;
  string address = 2;
  string secret = 3;
}
message AddClusterResponse {
  string secret = 1;
}

message DeleteClusterRequest {
  string id = 1;
}
message DeleteClusterResponse {}

message HeartbeatRequest {
  string id = 1;
  string secret = 2;
  string version = 3;
  bool auth_enabled = 4;
}

message HeartbeatResponse {
  enterprise.LicenseRecord license = 1;
}

service API {
  // Activate enables the license service by setting the enterprise activation
  // code to serve.
  rpc Activate(ActivateRequest) returns (ActivateResponse) {}
  rpc GetActivationCode(GetActivationCodeRequest) returns (GetActivationCodeResponse) {}

  // Deactivate removes the current license and disables the license server
  rpc Deactivate(DeactivateRequest) returns (DeactivateResponse) {}

  rpc AddCluster(AddClusterRequest) returns (AddClusterResponse) {}
  rpc Heartbeat(HeartbeatRequest) returns (HeartbeatResponse) {}
}

