syntax = "proto3";

package enterprise;
option go_package = "github.com/pachyderm/pachyderm/src/client/enterprise";

import "google/protobuf/timestamp.proto";
import "client/license/license.proto";

// Enterprise data structures

// EnterpriseRecord is the record we store in etcd for a Pachyderm enterprise
// that is registered with a license server
message EnterpriseRecord {
  string license_server = 1;
  string secret = 2;
  google.protobuf.Timestamp last_heartbeat = 3;

  license.LicenseRecord license = 4;
}

//// Enterprise Activation API

message ActivateRequest {
  reserved 1,2;

  string license_server = 3;

  string secret = 4;
}
message ActivateResponse {
  license.TokenInfo info = 1;
}

message GetStateRequest {}

message GetStateResponse {
  license.State state = 1;
  license.TokenInfo info = 2;

  // activation_code will always be an empty string,
  // call GetEnterpriseCode to get the activation code
  string activation_code = 3;
}

message GetActivationCodeRequest {}

message GetActivationCodeResponse {
  license.State state = 1;
  license.TokenInfo info = 2;
  string activation_code = 3;
}

message DeactivateRequest{}
message DeactivateResponse{}

service API {
  // Provide a Pachyderm enterprise token, enabling Pachyderm enterprise
  // features, such as the Pachyderm Dashboard and Auth system
  rpc Activate(ActivateRequest) returns (ActivateResponse) {}
  rpc GetState(GetStateRequest) returns (GetStateResponse) {}
  rpc GetActivationCode(GetActivationCodeRequest) returns (GetActivationCodeResponse) {}

  // Deactivate is a testing API. It removes a cluster's enterprise activation
  // token and sets its enterprise state to NONE (normally, once a cluster has
  // been activated, the only reachable state is EXPIRED).
  //
  // NOTE: This endpoint also calls DeleteAll (and deletes all Pachyderm data in
  // its cluster). This is to avoid dealing with invalid, intermediate states
  // (e.g. auth is activated but enterprise state is NONE)
  rpc Deactivate(DeactivateRequest) returns (DeactivateResponse) {}
}

